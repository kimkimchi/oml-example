@dc:title "System"
@dc:^description "A vocabulary for terms used to describe systems"
vocabulary <http://modelware.io/vocabularies/system> with # as system {

	extends <http://modelware.io/vocabularies/project>

	extends <http://iso.org/80000-6-kindsOfQuantities>

	uses <http://iso.org/80000-4-instances>

	aspect EndCircuitPresentingElement :> mission:PresentingElement

	aspect MassConstrainedElement :> metrology:Object

	ref concept project:WorkPackage :> MassConstrainedElement

	concept Subsystem :> mission:Component, MassConstrainedElement [
		restricts all relation base:aggregates to Assembly
	]
	
	concept Assembly :> mission:Component, MassConstrainedElement, EndCircuitPresentingElement [
		restricts all relation base:isAggregatedIn to Subsystem
	]

	concept EndCircuit :> mission:Interface [
		restricts all relation mission:isJoinedIn to Function
		restricts all relation mission:isPresentedBy to EndCircuitPresentingElement
	]

	concept PowerEndCircuit :> EndCircuit

	concept PowerIn :> PowerEndCircuit

	concept PowerOut :> PowerEndCircuit

	concept Function :> mission:Junction [
		restricts all relation mission:joins to EndCircuit
	]

	concept PowerFunction :> Function [
		restricts all relation mission:joins to PowerEndCircuit
	]

	concept MassConstraint :> metrology:UnitaryQuantity, metrology:UnitaryQuantityValue [
		restricts all relation metrology:isQuantityOf to MassConstrainedElement
		restricts relation metrology:hasKindOfQuantity to 80000-4-instances:mass
	]

	concept MassAllocationConstraint :> MassConstraint

	concept MassLimitConstraint :> MassConstraint

	relation entity ConnectsAssembly [
		from Function
		to Assembly
		forward connectsAssembly
		asymmetric
		irreflexive
	]

	relation entity ConnectsAssembly1 :> ConnectsAssembly [
		from Function
		to Assembly
		forward connectsAssembly1
		asymmetric
		irreflexive
	]

	relation entity ConnectsAssembly2 :> ConnectsAssembly [
		from Function
		to Assembly
		forward connectsAssembly2
		asymmetric
		irreflexive
	]

	enumerated scalar EndCircuitDirection :> xsd:string [
		"in"^^xsd:string,
		"inout"^^xsd:string,
		"out"^^xsd:string
	]

	enumerated scalar FunctionDirection :> xsd:string [
		"1to2"^^xsd:string,
		"2to1"^^xsd:string,
		"Bidirectional"^^xsd:string,
		"Undefined"^^xsd:string
	]

	scalar property hasFunctionDirection [
		domain Function
		range FunctionDirection
	]
	
	scalar property hasEndCircuitDirectione [
		domain Function
		range EndCircuitDirection
	]

	scalar property hasEndCircuitType [
		domain Function
		range xsd:string
	]

}